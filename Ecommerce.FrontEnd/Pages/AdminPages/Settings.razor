@page "/admin/settings"

@inject ISessionStorageService SessionStorage
@inject NavigationManager Navigation
@inject IUserGatewayApi UserGatewayApi
@inject NotificationService NotificationService
@inject IMapper Mapper

  <RadzenContent>
    <TopNavbar CustomerName="@_customerViewModel?.UserType.ToString()" />
  </RadzenContent>


@code {
  private CustomerViewModel _customerViewModel = new();

  protected override async Task OnInitializedAsync()
  {
    var token = await SessionStorage.GetItemAsync<string>("ecommerce-login-token");
    var user = await HandleAuth(token);
    _customerViewModel = Mapper.Map<CustomerViewModel>(user);
  }

  private async Task<UserDto> HandleAuth(string token)
  {
    if (string.IsNullOrEmpty(token))
    {
      RemoveCachedSession();
      Navigation.NavigateTo("login", true);
    }

    var userEmail = await SessionStorage.GetItemAsync<string>("user-email");
    var customer = await UserGatewayApi.GetCustomerByEmail(userEmail);

    if (customer.UserType != UserTypes.Admin) Navigation.NavigateTo("/login", true);
    RemoveCachedSession();
    return customer;
  }

  private async Task OnLogOutClickAsync()
  {
    RemoveCachedSession();

    NotificationService.Notify
    (new NotificationMessage()
      {
        Severity = NotificationSeverity.Info,
        Summary = "Logget ud",
        Detail = "Du blev logget ud",
        Duration = 4000
      });
    await Task.Delay(1000);
    Navigation.NavigateTo("login", true);
  }

  private void RemoveCachedSession()
  {
    SessionStorage.RemoveItemAsync("ecommerce-login-token");
    SessionStorage.RemoveItemAsync("basket");
    SessionStorage.RemoveItemAsync("user-email");
    SessionStorage.RemoveItemAsync("assigned-order");
  }
}
