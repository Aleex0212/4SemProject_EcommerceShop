@page "/basket"
@using Ecommerce.FrontEnd.Components

@inject IMapper Mapper
@inject NotificationService NotificationService
@inject NavigationManager Navigation
@inject Blazored.SessionStorage.ISessionStorageService SessionStorage
@inject IOrderGatewayApi OrderGatewayApi
@inject IUserGatewayApi UserGatewayApi

<RadzenContent>
  <TopNavbar CustomerName="@_customerViewModel?.Name" />

  <div class="content-wrapper">
    <Sidebar
      OnProductsClick="OnProductsClickAsync"
      OnBasketClick="OnBasketClickAsync"
      OnOrdreClick="OnOrdreClickAsync"
      OnSettingsClick="OnSettingsClickAsync"
      OnLogOutClick="OnLogOutClickAsync" />
  </div>

    <div class="basket-main-content">
      <h3>Din Kurv</h3>

      @if (!_productLineViewModels.Any())
      {
        <p class="empty-basket-message">Din kurv er tom.</p>
      }
      else
      {
        <ul class="basket-product-list">
          @foreach (var productLine in _productLineViewModels)
          {
            <li class="basket-product-item">
              <h3>@productLine.Product.Name</h3>
              <p class="product-price">Pris: @productLine.Product.Price</p>
              <p class="product-quantity">Antal: @productLine.Quantity</p>
              <RadzenButton Text="Fjern" Class="basket-remove-button" HoverStyle="background-color: #990000; transform: scale(1.05);" />
            </li>
          }
        </ul>
      }

      <div class="basket-total-price">
        <span>Totalpris:</span>
        <span>@TotalPrice.ToString(CultureInfo.CurrentCulture) kr.</span>
      </div>

      <div class="basket-checkout-button-container">
        <RadzenButton Text="Gå til betaling" Class="basket-checkout-button" Click="OnCheckoutClickAsync" />
      </div>
    </div>
</RadzenContent>


@code {
  private CustomerViewModel _customerViewModel = new();
  private List<ProductLineViewModel> _productLineViewModels = new();

  private decimal TotalPrice
  {
    get
    {
      return _productLineViewModels
        .Sum(p => p.Product.Price * p.Quantity);
    }
  }

  protected override async Task OnInitializedAsync()
  {
    var token = await SessionStorage.GetItemAsync<string>("ecommerce-login-token");
    if (string.IsNullOrEmpty(token)) Navigation.NavigateTo("login", true);

    var userEmail = await SessionStorage.GetItemAsync<string>("user-email");
    var customer = await UserGatewayApi.GetCustomerByEmail(userEmail);

    _customerViewModel = Mapper.Map<CustomerViewModel>(customer);

    var basket = await SessionStorage.GetItemAsync<List<ProductLineViewModel>>("basket");
    if (basket != null && basket.Any()) _productLineViewModels = basket;
  }

  private async Task OnCheckoutClickAsync()
  {
    var orderDto = new OrderDto
      {
        Id = Guid.NewGuid(),
        Customer = Mapper.Map<UserDto>(_customerViewModel),
        ProductLines = Mapper.Map<List<ProductLineDto>>(_productLineViewModels),
        Status = OrderStatus.Received,
        TotalPrice = TotalPrice
      };

    try
    {
      var token = await SessionStorage.GetItemAsync<string>("ecommerce-login-token");
      if (string.IsNullOrEmpty(token)) Navigation.NavigateTo("login", true);
      await OrderGatewayApi.CreateOrderAsync(orderDto, $"Bearer {token}");

      NotificationService.Notify(new NotificationMessage
        {
          Severity = NotificationSeverity.Success,
          Summary = "Ordre oprettet",
          Detail = "Din ordre er blevet gennemført!",
          Duration = 4000
        });
      Navigation.NavigateTo("/orders", forceLoad: true);
    }
    catch (Exception ex)
    {
      NotificationService.Notify(new NotificationMessage
        {
          Severity = NotificationSeverity.Error,
          Summary = "Fejl",
          Detail = "Der opstod en uventet fejl",
          Duration = 4000
        });
    }
  }

  private void OnProductsClickAsync()
  {
    Navigation.NavigateTo("/products");
  }

  private void OnBasketClickAsync()
  {
    Navigation.NavigateTo("/basket");
  }

  private void OnOrdreClickAsync()
  {
    Navigation.NavigateTo("/orders");
  }

  private void OnSettingsClickAsync()
  {
    Navigation.NavigateTo("/settings");
  }

  private async Task OnLogOutClickAsync()
  {
    await SessionStorage.RemoveItemAsync("ecommerce-login-token");
    await SessionStorage.RemoveItemAsync("basket");
    await SessionStorage.RemoveItemAsync("user-email");
    await SessionStorage.RemoveItemAsync("assigned-order");

    NotificationService.Notify
    (new NotificationMessage()
      {
        Severity = NotificationSeverity.Info,
        Summary = "Logget ud",
        Detail = "Du blev logget ud",
        Duration = 4000
      });
    await Task.Delay(1000);
    Navigation.NavigateTo("login", true);
  }
}
