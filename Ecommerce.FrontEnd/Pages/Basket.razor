@page "/basket"

@inject NotificationService NotificationService
@inject NavigationManager Navigation
@inject ISessionStorageService SessionStorage
@inject IOrderGatewayApi OrderGatewayApi
@inject IUserGatewayApi UserGatewayApi
@inject IMapper Mapper

<RadzenContent>
  <TopNavbar CustomerName="@_customerViewModel?.Name" />

  <div class="content-wrapper">
    <Sidebar OnProductsClick="OnProductsClickAsync"
             OnBasketClick="OnBasketClickAsync"
             OnOrdreClick="OnOrderClickAsync"
             OnSettingsClick="OnSettingsClickAsync"
             OnLogOutClick="OnLogOutClickAsync" />
  </div>

  <div class="basket-main-content">
    <h3>Din Kurv</h3>

    @if (!_productLineViewModels.Any())
    {
      <p class="empty-basket-message">Din kurv er tom.</p>
    }
    else
    {
      <ul class="basket-product-list">
        @foreach (var productLine in _productLineViewModels)
        {
          <li class="basket-product-item">
            <h3>@productLine.Product.Name</h3>
            <p class="product-price">Pris: @productLine.Product.Price</p>

            <RadzenNumeric TValue="int" Min="1"
                           Class="input-numeric"
                           @bind-Value="productLine.Quantity" />

            <RadzenButton Text="Opdater antal"
                          Class="button-buy-now"
                          HoverStyle="background-color: #990000; transform: scale(1.05);"
                          Click="@(args => OnUpdateQuantity(productLine))" />
            <RadzenButton Text="Fjern"
                          Class="basket-remove-button"
                          HoverStyle="background-color: #990000; transform: scale(1.05);"
                          Click="@(args => OnRemoveItem(productLine))" />
          </li>
        }
      </ul>
    }

    <div class="basket-total-price">
      <span>Totalpris:</span>
      <span>@TotalPrice.ToString(CultureInfo.CurrentCulture) DKK</span>
    </div>

    <div class="basket-checkout-button-container">
      <RadzenButton Text="Gå til betaling"
                    Class="basket-checkout-button"
                    Click="OnCheckoutClickAsync" />
    </div>
  </div>
</RadzenContent>

@code {
  private CustomerViewModel _customerViewModel = new();
  private List<ProductLineViewModel> _productLineViewModels = new();

  private decimal TotalPrice => _productLineViewModels.Sum(p => p.Product.Price * p.Quantity);

  protected override async Task OnInitializedAsync()
  {
    var token = await SessionStorage.GetItemAsync<string>("ecommerce-login-token");
    var customer = await HandleAuth(token);
    _customerViewModel = Mapper.Map<CustomerViewModel>(customer);

    var basket = await SessionStorage.GetItemAsync<List<ProductLineViewModel>>("basket");
    if (basket != null && basket.Any()) _productLineViewModels = basket;
  }

  private async Task<UserDto> HandleAuth(string token)
  {
    if (string.IsNullOrEmpty(token))
    {
      RemoveCachedSession();
      Navigation.NavigateTo("login", true);
    }
    
    var userEmail = await SessionStorage.GetItemAsync<string>("user-email");
    var customer = await UserGatewayApi.GetCustomerByEmail(userEmail);
    
    if(customer.UserType != UserTypes.Customer)
    {
      RemoveCachedSession();
      NotificationService.Notify(new NotificationMessage()
        {
          Severity = NotificationSeverity.Error,
          Summary = "Adgang nægtet",
          Detail = "Du har ikke adgang til denne side",
          Duration = 4000
        });
      await Task.Delay(1000);
      Navigation.NavigateTo("/login", true);
    }
    return customer;
  }

  private async Task OnUpdateQuantity(ProductLineViewModel productLine)
  {
    var basket = await SessionStorage.GetItemAsync<List<ProductLineViewModel>>("basket");
    var productLineToUpdate = basket.FirstOrDefault(p => p.Product.Id == productLine.Product.Id);

    if (productLineToUpdate != null)
    {
      productLineToUpdate.Quantity = productLine.Quantity;
      await SessionStorage.SetItemAsync("basket", basket);
      _productLineViewModels = basket;

      if (productLine.Quantity > 0)
      {
        NotificationService.Notify(new NotificationMessage
          {
            Severity = NotificationSeverity.Info,
            Summary = "Kurv opdateret",
            Detail = $"{productLine.Quantity} stk. af {productLine.Product.Name} er opdateret",
            Duration = 2000
          });
      }
    }
  }

  private async Task OnRemoveItem(ProductLineViewModel productLine)
  {
    var basket = await SessionStorage.GetItemAsync<List<ProductLineViewModel>>("basket");
    basket.RemoveAll(p => p.Product.Id == productLine.Product.Id);
    await SessionStorage.SetItemAsync("basket", basket);
    _productLineViewModels = basket;
  }

  private async Task OnLogOutClickAsync()
  {
    RemoveCachedSession();
    
    NotificationService.Notify(new NotificationMessage()
      {
        Severity = NotificationSeverity.Info,
        Summary = "Logget ud",
        Detail = "Du blev logget ud",
        Duration = 4000
      });

    await Task.Delay(1000);
    Navigation.NavigateTo("login", true);
  }

  private async Task OnCheckoutClickAsync()
  {
    if (!_productLineViewModels.Any())
    {
      NotificationService.Notify(new NotificationMessage()
        {
          Severity = NotificationSeverity.Error,
          Summary = "Kurv er tom",
          Detail = "Kan ikke gennemfører order med en tom kurv",
          Duration = 4000
        });
      return;
    }
    if (_productLineViewModels.Any(p => p.Quantity == 0))
    {
      NotificationService.Notify(new NotificationMessage()
        {
          Severity = NotificationSeverity.Error,
          Summary = "Fejl ved antal",
          Detail = "Antal af et produkt kan ikke være 0",
          Duration = 4000
        });
      return;
    }

    try
    {
      var token = await SessionStorage.GetItemAsync<string>("ecommerce-login-token");

      var orderDto = new OrderDto
        {
          Id = Guid.NewGuid(),
          Customer = Mapper.Map<UserDto>(_customerViewModel),
          ProductLines = Mapper.Map<List<ProductLineDto>>(_productLineViewModels),
          Status = OrderStatus.Received,
          TotalPrice = TotalPrice
        };

      try
      {
        await OrderGatewayApi.CreateOrderAsync(orderDto, $"Bearer {token}");
      }
      catch (ApiException)
      {
        NotificationService.Notify(new NotificationMessage()
          {
            Severity = NotificationSeverity.Error,
            Summary = "autentificeringsfejl",
            Detail = "du har ikke rettighedder til at oprette en ordre",
            Duration = 4000
          });
        await Task.Delay(2000);
        RemoveCachedSession();
        Navigation.NavigateTo("login");
      }

      await SessionStorage.RemoveItemAsync("basket");
      _productLineViewModels.Clear();

      NotificationService.Notify(new NotificationMessage()
        {
          Severity = NotificationSeverity.Success,
          Summary = "Ordre oprettet",
          Detail = "Din ordre er blevet oprettet.",
          Duration = 4000
        });

      await Task.Delay(2000);
      Navigation.NavigateTo("/orders");
    }
    catch (Exception ex)
    {
      NotificationService.Notify(new NotificationMessage()
        {
          Severity = NotificationSeverity.Error,
          Summary = "Fejl ved ordre",
          Detail = $"Der opstod en uventet fejl: {ex.Message}",
          Duration = 4000
        });
    }
  }

  private void RemoveCachedSession()
  {
    SessionStorage.RemoveItemAsync("ecommerce-login-token");
    SessionStorage.RemoveItemAsync("basket");
    SessionStorage.RemoveItemAsync("user-email");
    SessionStorage.RemoveItemAsync("assigned-order");
  }

  private void OnProductsClickAsync()
  {
    Navigation.NavigateTo("/products");
  }

  private void OnBasketClickAsync()
  {
    Navigation.NavigateTo("/basket");
  }

  private void OnOrderClickAsync()
  {
    Navigation.NavigateTo("/orders");
  }

  private void OnSettingsClickAsync()
  {
    Navigation.NavigateTo("/admin/settings");
  }
}
