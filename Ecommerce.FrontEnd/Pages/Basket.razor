@page "/basket"

@inject IMapper Mapper
@inject NotificationService NotificationService
@inject NavigationManager Navigation
@inject Blazored.SessionStorage.ISessionStorageService SessionStorage
@inject IOrderGatewayApi OrderGatewayApi
@inject IUserGatewayApi UserGatewayApi

<RadzenContent>
  <div class="navbar-container" style="background-color: #1b242e; padding: 20px 40px; display: flex; justify-content: space-between; align-items: center; box-shadow: 0 6px 15px rgba(0, 0, 0, 0.1); border-radius: 12px; width: 100%; position: fixed; top: 0; left: 0; z-index: 10;">
    <div style="font-size: 24px; font-weight: bold; color: white; display: flex; align-items: center;">
      <RadzenIcon Icon="home" Style="width: 40px; margin-right: 10px;" />
      <span>Velkommen til EcommerceShop</span>
    </div>
    <RadzenButton Icon="account_circle" Style="background-color: transparent; color: white; border: none; font-size: 28px; padding: 0;" />
  </div>

  <div style="display: flex; padding-top: 80px; height: 100vh;">
    <div style="background-color: #1b242e; padding: 20px; width: 250px; box-shadow: 0 6px 15px rgba(0, 0, 0, 0.1); height: 100%; position: fixed; left: 0; top: 80px;">

      <RadzenButton Text="Produkter"
                    Style="background-color: #2c3e50; color: white; width: 100%; padding: 15px; margin-bottom: 15px; border-radius: 6px; border: none; cursor: pointer; box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2); transition: all 0.3s ease; font-size: 18px;"
                    Click="OnProductsClickAsync" />

      <RadzenButton Text="Kurv" Icon="shopping_cart"
                    Style="background-color: #3498db; color: white; width: 100%; padding: 15px; margin-bottom: 20px;border-radius: 6px; border: none; cursor: pointer; box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2); transition: all 0.3s ease; font-size: 18px;" />

      <RadzenButton Text="Ordre"
                    Style="background-color: #2c3e50; color: white; width: 100%; padding: 15px; margin-bottom: 15px; border-radius: 6px; border: none; cursor: pointer; box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);  transition: all 0.3s ease; font-size: 18px;"
                      Click="OnOrdreClickAsync" />
      
      <RadzenButton Text="Indstillinger"
                    Style="background-color: #2c3e50; color: white; width: 100%; padding: 15px; margin-bottom: 15px; border-radius: 6px; border: none; cursor: pointer; box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2); transition: all 0.3s ease; font-size: 18px;"
                    />

      <RadzenButton Text="Log ud" Icon="exit_to_app"
                    Style="background-color: #b30000; color: white; width: 100%; padding: 15px; margin-bottom: 15px; border-radius: 6px; border: none; cursor: pointer; box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2); transition: all 0.3s ease; font-size: 18px;"
                    Click="OnLogOutClickAsync" />
    </div>

    <div style="display: flex; flex-direction: column; justify-content: flex-start; padding: 20px 40px; background-color: #c0cad7; overflow-y: auto; border-radius: 12px; margin-left: 270px; width: calc(100% - 270px);">
      <div style="flex-grow: 1; margin-right: 20px;">
        <h3 style="color: black; font-size: 22px; font-weight: bold; font-family: 'Segoe UI', sans-serif; text-align: center;">
          Din Kurv
        </h3>

        @if (!_productLineViewModels.Any())
        {
          <p style="color: #2c3e50; font-family: 'Segoe UI', sans-serif; font-size: 18px;">Din kurv er tom.</p>
        }
        else
        {
          <ul style="list-style-type: none; padding: 0; margin: 0;">
            @foreach (var productLine in _productLineViewModels)
            {
              <li style="background-color: #ffffff; border-radius: 12px; box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15); padding: 20px; text-align: left; margin-bottom: 15px; transition: all 0.3s ease;">
                <h3 style="color: #2c3e50; font-size: 22px; font-weight: bold; font-family: 'Segoe UI', sans-serif;">@productLine.Product.Name</h3>
                <p style="color: #3498db; font-size: 18px; margin: 5px 0; font-family: 'Segoe UI', sans-serif;">Pris: @productLine.Product.Price</p>
                <p style="color: #3498db; font-size: 18px; margin: 5px 0; font-family: 'Segoe UI', sans-serif;">Antal: @productLine.Quantity</p>
                <RadzenButton Text="Fjern" Style="background-color: #b30000; color: white; padding: 10px 20px; border-radius: 8px; border: none; cursor: pointer; box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1); font-family: 'Segoe UI', sans-serif; transition: all 0.3s ease;" HoverStyle="background-color: #990000; transform: scale(1.05);" />
              </li>
            }
          </ul>
        }

        <div style="padding: 10px; background-color: #2c3e50; color: white; border-radius: 6px; display: flex; justify-content: space-between; margin-top: auto;">
          <span>Totalpris:</span>
          <span>@TotalPrice.ToString(CultureInfo.CurrentCulture)</span>
        </div>
      </div>
    </div>

    <div style="display: flex; align-items: center; justify-content: flex-end; width: auto; padding: 15px; background-color: #2c3e50;">
      <RadzenButton Text="Gå til betaling" Style="background-color: #2f6a2f; color: white; font-size: 18px; padding: 10px 25px; border-radius: 6px; width: auto;" Click="OnCheckoutClickAsync" />
    </div>
  </div>
</RadzenContent>


@code {
  private CustomerViewModel _customerViewModel = new();
  private List<ProductLineViewModel> _productLineViewModels = new();

  private decimal TotalPrice
  {
    get
    {
      return _productLineViewModels
        .Sum(p => p.Product.Price * p.Quantity);
    }
  }

  protected override async Task OnInitializedAsync()
  {
    var token = await SessionStorage.GetItemAsync<string>("ecommerce-login-token");
    if (string.IsNullOrEmpty(token))
    {
      NotificationService.Notify
      (new NotificationMessage()
        {
          Severity = NotificationSeverity.Error,
          Summary = "Login Fejlede",
          Detail = "Forkert Email eller Adgangskode",
          Duration = 2000
        });
      Navigation.NavigateTo("login", true);
    }

    var userEmail = await SessionStorage.GetItemAsync<string>("user-email");
    var customer = await UserGatewayApi.GetCustomerByEmail(userEmail);

    _customerViewModel = Mapper.Map<CustomerViewModel>(customer);

    var basket = await SessionStorage.GetItemAsync<List<ProductLineViewModel>>("basket");
    if (basket != null && basket.Any()) _productLineViewModels = basket;
  }

  private async Task OnCheckoutClickAsync()
  {
    var orderDto = new OrderDto
      {
        Id = Guid.NewGuid(),
        Customer = Mapper.Map<UserDto>(_customerViewModel),
        ProductLines = Mapper.Map<List<ProductLineDto>>(_productLineViewModels),
        Status = OrderStatus.Received,
        TotalPrice = TotalPrice
      };

    try
    {
      var token = await SessionStorage.GetItemAsync<string>("ecommerce-login-token");
      if (string.IsNullOrEmpty(token)) Navigation.NavigateTo("login", true);
      await OrderGatewayApi.CreateOrderAsync(orderDto, $"Bearer {token}");

      NotificationService.Notify(new NotificationMessage
        {
          Severity = NotificationSeverity.Success,
          Summary = "Ordre oprettet",
          Detail = "Din ordre er blevet gennemført!",
          Duration = 4000
        });

      await SessionStorage.SetItemAsync("assigned-order", orderDto);
      Navigation.NavigateTo("/Orders");
    }
    catch (Exception ex)
    {
      NotificationService.Notify(new NotificationMessage
        {
          Severity = NotificationSeverity.Error,
          Summary = "Fejl",
          Detail = "Der opstod en uventet fejl",
          Duration = 4000
        });
    }
  }
  private void OnProductsClickAsync(MouseEventArgs obj)
  {
    Navigation.NavigateTo("/homepage");
  }

  private async Task OnLogOutClickAsync(MouseEventArgs obj)
  {
    await SessionStorage.RemoveItemAsync("ecommerce-login-token");
    await SessionStorage.RemoveItemAsync("basket");
    await SessionStorage.RemoveItemAsync("user-email");
    await SessionStorage.RemoveItemAsync("assigned-order");

    NotificationService.Notify
    (new NotificationMessage()
      {
        Severity = NotificationSeverity.Info,
        Summary = "Logget ud",
        Detail = "Du blev logget ud",
        Duration = 4000
      });
    await Task.Delay(1000);
    Navigation.NavigateTo("login", true);
  }

  private void OnOrdreClickAsync(MouseEventArgs obj)
  {
    Navigation.NavigateTo("/orders");
  }
}
