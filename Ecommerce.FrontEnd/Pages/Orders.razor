@page "/orders"
@using Ecommerce.FrontEnd.Components

@inject IMapper Mapper
@inject NavigationManager Navigation
@inject NotificationService NotificationService
@inject Blazored.SessionStorage.ISessionStorageService SessionStorage
@inject IUserGatewayApi UserGatewayApi
@inject IOrderGatewayApi OrderGatewayApi

<RadzenContent>
  <TopNavbar CustomerName="@_customerViewModel?.Name" />

  <div class="content-wrapper">
    <Sidebar OnProductsClick="OnProductsClickAsync"
             OnBasketClick="OnBasketClickAsync"
             OnOrdreClick="OnOrdreClickAsync"
             OnSettingsClick="OnSettingsClickAsync"
             OnLogOutClick="OnLogOutClickAsync" />
  </div>

  <div style="margin-left: 270px; padding: 20px; flex-grow: 1;">
    <h1 style="color: #2c3e50;">Ordredetaljer</h1>

    @if (_orderViewModels != null && _orderViewModels.Any())
    {
      @foreach (var order in _orderViewModels)
      {
        <RadzenPanel Style="background-color: #ffffff; padding: 20px; border-radius: 12px; box-shadow: 0 6px 15px rgba(0, 0, 0, 0.1);">
          <RadzenGrid Data="@order.ProductLines" TItem="ProductLineViewModel" Style="width: 100%;">
            <RadzenGridColumn TItem="ProductLineViewModel" Property="ProductId" Title="Produkt ID" />
            <RadzenGridColumn TItem="ProductLineViewModel" Property="Product.Name" Title="Produkt Navn" />
            <RadzenGridColumn TItem="ProductLineViewModel" Property="Quantity" Title="Antal" />
            <RadzenGridColumn TItem="ProductLineViewModel" Property="TotalPrice" Title="Pris" />
          </RadzenGrid>

          <div style="margin-top: 20px;">
            <h3 style="color: #3498db;">Samlet pris: @order.TotalPrice</h3>
          </div>
        </RadzenPanel>
      }
    }
    else
    {
      <div style="color: #b30000;">Ingen ordre.</div>
    }
  </div>
</RadzenContent>

@code {
  private List<OrderViewModel>? _orderViewModels;
  private CustomerViewModel? _customerViewModel;

  protected override async Task OnInitializedAsync()
  {
    var token = await SessionStorage.GetItemAsync<string>("ecommerce-login-token");
    if (string.IsNullOrEmpty(token)) Navigation.NavigateTo("login", true);

    var userEmail = await SessionStorage.GetItemAsync<string>("user-email");
    var customer = await UserGatewayApi.GetCustomerByEmail(userEmail);
    _customerViewModel = Mapper.Map<CustomerViewModel>(customer);

    var orderDtos = await OrderGatewayApi.GetOrdersByCustomerEmail(userEmail, $"Bearer {token}");
    _orderViewModels = Mapper.Map<List<OrderViewModel>?>(orderDtos);
  }

  private void OnProductsClickAsync()
  {
    Navigation.NavigateTo("/products");
  }

  private void OnBasketClickAsync()
  {
    Navigation.NavigateTo("/basket");
  }

  private void OnOrdreClickAsync()
  {
    Navigation.NavigateTo("/orders");
  }

  private void OnSettingsClickAsync()
  {
    Navigation.NavigateTo("/settings");
  }

  private async Task OnLogOutClickAsync()
  {
    await SessionStorage.RemoveItemAsync("ecommerce-login-token");
    await SessionStorage.RemoveItemAsync("basket");
    await SessionStorage.RemoveItemAsync("user-email");
    await SessionStorage.RemoveItemAsync("assigned-order");

    NotificationService.Notify
    (new NotificationMessage()
      {
        Severity = NotificationSeverity.Info,
        Summary = "Logget ud",
        Detail = "Du blev logget ud",
        Duration = 4000
      });
    await Task.Delay(1000);
    Navigation.NavigateTo("login", true);
  }
}
