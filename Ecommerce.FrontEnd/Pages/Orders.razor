@page "/orders"
@using Ecommerce.FrontEnd.Components
@using Microsoft.EntityFrameworkCore.Migrations.Operations

@inject IMapper Mapper
@inject NavigationManager Navigation
@inject NotificationService NotificationService
@inject Blazored.SessionStorage.ISessionStorageService SessionStorage
@inject IUserGatewayApi UserGatewayApi
@inject IOrderGatewayApi OrderGatewayApi

<RadzenContent>
  <TopNavbar CustomerName="@_customerViewModel?.Name" />

  <div class="main-wrapper">
    <Sidebar OnProductsClick="OnProductsClickAsync"
             OnBasketClick="OnBasketClickAsync"
             OnOrdreClick="OnOrdreClickAsync"
             OnSettingsClick="OnSettingsClickAsync"
             OnLogOutClick="OnLogOutClickAsync" />

    <div class="order-content">
      <h1 class="page-title">Ordreoversigt</h1>

      @if (_orderViewModels != null && _orderViewModels.Any())
      {
        <ul class="orders-list">
          @foreach (var order in _orderViewModels)
          {
            <li class="order-item">
              <div class="order-header">
                <h2 class="order-id">Ordre reference: @order.Id</h2>
                <span class="order-status">Status: @order.Status</span>
              </div>
              <p class="order-total-price">Totalpris (DKK): @order.TotalPrice</p>

              <div class="customer-info">
                <h3>Kundeinfo</h3>
                <p><strong>Navn:</strong> @order.Customer.Name</p>
                <p><strong>Telefon:</strong> @order.Customer.Phone</p>
                <p><strong>Adresse:</strong> @order.Customer.Address</p>
              </div>

              <div class="product-lines">
                <h3>Produkter</h3>

                @if (order.ProductLines.Any())
                {
                  <ul>
                    @foreach (var productLine in order.ProductLines)
                    {
                      <li class="product-line">
                        <p><strong>Produkt reference:</strong> @productLine.Product.Id</p>
                        <p><strong>Produkt Navn:</strong> @productLine.Product.Name</p>
                        <p><strong>Antal:</strong> @productLine.Quantity</p>
                        <p><strong>Pris (DKK):</strong> @($"{productLine.Product.Price}")</p>
                      </li>
                    }
                  </ul>
                }
                else
                {
                  <p class="no-product-lines">Ingen produktlinjer fundet.</p>
                }
              </div>
            </li>
          }
        </ul>
      }
      else
      {
        <div class="no-orders">Ingen ordre fundet.</div>
      }
    </div>
  </div>
</RadzenContent>

@code {
  private List<OrderViewModel>? _orderViewModels;
  private CustomerViewModel? _customerViewModel;

  protected override async Task OnInitializedAsync()
  {
    var token = await SessionStorage.GetItemAsync<string>("ecommerce-login-token");
    var customer = await HandleAuth(token);

    var orderDtos = await OrderGatewayApi.GetOrdersByCustomerEmail(customer.Email, $"Bearer {token}");
    _orderViewModels = Mapper.Map<List<OrderViewModel>?>(orderDtos);
    StateHasChanged();
  }

  private async Task<UserDto> HandleAuth(string token)
  {
    if (string.IsNullOrEmpty(token))
    {
      RemoveCachedSession();
      Navigation.NavigateTo("login", true);
    }

    var userEmail = await SessionStorage.GetItemAsync<string>("user-email");
    var customer = await UserGatewayApi.GetCustomerByEmail(userEmail);
    
    if (customer.UserType != UserTypes.Customer)
    {
      RemoveCachedSession();
      NotificationService.Notify
      (new NotificationMessage()
        {
          Severity = NotificationSeverity.Error,
          Summary = "Adgang nægtet",
          Detail = "Du har ikke adgang til denne side",
          Duration = 4000
        });
      await Task.Delay(1000);
      Navigation.NavigateTo("/login", true);
    }
    return customer;
  }

  private async Task OnLogOutClickAsync()
  {
    RemoveCachedSession();

    NotificationService.Notify
    (new NotificationMessage()
      {
        Severity = NotificationSeverity.Info,
        Summary = "Logget ud",
        Detail = "Du blev logget ud",
        Duration = 4000
      });
    await Task.Delay(1000);
    Navigation.NavigateTo("login", true);
  }


  private void RemoveCachedSession()
  {
    SessionStorage.RemoveItemAsync("ecommerce-login-token");
    SessionStorage.RemoveItemAsync("basket");
    SessionStorage.RemoveItemAsync("user-email");
    SessionStorage.RemoveItemAsync("assigned-order");
  }

  private void OnProductsClickAsync()
  {
    Navigation.NavigateTo("/products");
  }

  private void OnBasketClickAsync()
  {
    Navigation.NavigateTo("/basket");
  }

  private void OnOrdreClickAsync()
  {
    Navigation.NavigateTo("/orders");
  }

  private void OnSettingsClickAsync()
  {
    Navigation.NavigateTo("/admin/settings");
  }
}
