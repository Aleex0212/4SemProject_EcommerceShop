@page "/orders"

@inject IMapper Mapper
@inject NavigationManager Navigation
@inject NotificationService NotificationService
@inject Blazored.SessionStorage.ISessionStorageService SessionStorage
@inject IUserGatewayApi UserGatewayApi
@inject IOrderGatewayApi OrderGatewayApi

<RadzenContent>
  <div class="topnavbar-container">
    <div class="topnavbar-content">
      <RadzenIcon Icon="home" Style="width: 40px;" />
      <span class="topnavbar-heading">Velkommen til EcommerceShop</span>
      <div class="topnavbar-login">
        <h3 style="color: #3498db; margin: 0;">Logget ind som</h3>
        <h3>@_customerViewModel?.Name</h3>
      </div>
    </div>
    <RadzenButton Icon="account_circle" class="topnavbar-button" />
  </div>

  <div class="sidebar">
    <RadzenButton Text="Produkter" class="sidebar-button sidebar-button-primary" Click="OnProductsClickAsync" />
    <RadzenButton Text="Kurv" Icon="shopping_cart" class="sidebar-button sidebar-button-secondary" Click="OnBasketClickAsync" />
    <RadzenButton Text="Ordre" class="sidebar-button sidebar-button-primary" />
    <RadzenButton Text="Indstillinger" class="sidebar-button sidebar-button-secondary" />
    <RadzenButton Text="Log ud" Icon="exit_to_app" class="sidebar-button sidebar-button-logout" Click="OnLogOutClickAsync" />
  </div>

  <div style="margin-left: 270px; padding: 20px; flex-grow: 1;">
    <h1 style="color: #2c3e50;">Ordredetaljer</h1>

    @if (_orderViewModels != null && _orderViewModels.Any())
    {
      @foreach (var order in _orderViewModels)
      {
        <RadzenPanel Style="background-color: #ffffff; padding: 20px; border-radius: 12px; box-shadow: 0 6px 15px rgba(0, 0, 0, 0.1);">
          <RadzenGrid Data="@order.ProductLines" TItem="ProductLineViewModel" Style="width: 100%;">
            <RadzenGridColumn TItem="ProductLineViewModel" Property="ProductId" Title="Produkt ID" />
            <RadzenGridColumn TItem="ProductLineViewModel" Property="Product.Name" Title="Produkt Navn" />
            <RadzenGridColumn TItem="ProductLineViewModel" Property="Quantity" Title="Antal" />
            <RadzenGridColumn TItem="ProductLineViewModel" Property="TotalPrice" Title="Pris" />
          </RadzenGrid>

          <div style="margin-top: 20px;">
            <h3 style="color: #3498db;">Samlet pris: @order.TotalPrice</h3>
          </div>
        </RadzenPanel>
      }
    }
    else
    {
      <div style="color: #b30000;">Ingen ordre.</div>
    }
  </div>
</RadzenContent>

@code {
  private List<OrderViewModel>? _orderViewModels; 
  private CustomerViewModel? _customerViewModel;

  protected override async Task OnInitializedAsync()
  {
    var userEmail = await SessionStorage.GetItemAsync<string>("user-email");

    var customer = await UserGatewayApi.GetCustomerByEmail(userEmail);
    _customerViewModel = Mapper.Map<CustomerViewModel>(customer);

    var token = await SessionStorage.GetItemAsStringAsync("ecommerce-login-token");

    try
    {
      var orders = await OrderGatewayApi.GetOrdersByEmailAsync(userEmail, $"Bearer {token}");
      _orderViewModels = Mapper.Map<List<OrderViewModel>>(orders);
    }
    catch (Exception ex)
    {
      Console.WriteLine(ex.Message);
    }
  }


  private void OnBasketClickAsync(MouseEventArgs obj)
  {
    Navigation.NavigateTo("/basket");
  }

  private async Task OnLogOutClickAsync(MouseEventArgs obj)
  {
    await SessionStorage.RemoveItemAsync("ecommerce-login-token");
    await SessionStorage.RemoveItemAsync("basket");
    await SessionStorage.RemoveItemAsync("user-email");
    await SessionStorage.RemoveItemAsync("assigned-order");

    NotificationService.Notify(new NotificationMessage
    {
      Severity = NotificationSeverity.Info,
      Summary = "Logget ud",
      Detail = "Du blev logget ud",
      Duration = 4000
    });

    await Task.Delay(1000);
    Navigation.NavigateTo("login", true);
  }

  private void OnProductsClickAsync(MouseEventArgs obj)
  {
    Navigation.NavigateTo("/homepage");
  }

  private void OnSettingsClickAsync(MouseEventArgs obj)
  {
    Navigation.NavigateTo("/settings");
  }
}
