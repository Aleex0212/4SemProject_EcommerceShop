@page "/homepage"

@inject IMapper Mapper
@inject NotificationService NotificationService
@inject NavigationManager Navigation
@inject Blazored.SessionStorage.ISessionStorageService SessionStorage
@inject IProductGatewayApi ProductGatewayApi
@inject IUserGatewayApi UserGatewayApi

<RadzenContent>
  <div class="topnavbar-container">
    <div class="topnavbar-content">
      <RadzenIcon Icon="home" Style="width: 40px;" />
      <span class="topnavbar-heading">Velkommen til EcommerceShop</span>
      <div class="topnavbar-login">
        <h3>Logget ind som</h3>
        <h3>@_customerViewModel?.Name</h3>
      </div>
    </div>
    <RadzenButton Icon="account_circle" Class="topnavbar-button topnavbar-button-icon" />
  </div>

  <div class="content-wrapper">
    <div class="sidebar">
      <RadzenButton Text="Produkter" Class="sidebar-button sidebar-button-primary" />
      <RadzenButton Text="Kurv" Icon="shopping_cart" Class="sidebar-button sidebar-button-secondary" Click="OnBasketClickAsync" />
      <RadzenButton Text="Ordre" Class="sidebar-button sidebar-button-secondary" Click="OnOrdreClickAsync" />
      <RadzenButton Text="Indstillinger" Class="sidebar-button sidebar-button-secondary" />
      <RadzenButton Text="Log ud" Icon="exit_to_app" Class="sidebar-button sidebar-button-logout" Click="OnLogOutClickAsync" />
    </div>

    <div class="main-content">
      @if (_products == null)
      {
        <p class="product-name">Indlæser produkter...</p>
      }
      else
      {
        @foreach (var product in _products)
        {
          <div class="product-card">
            <img src="https://fakeimg.pl/600x400/cccccc/3b3d3d?text=Produkt" alt="@product.Name" />
            <h3 class="product-name">@product.Name</h3>
            <p class="product-price">Pris: @product.Price kr.</p>
            <p class="product-quantity">Antal tilgængelig: @product.Amount</p>
            <div class="product-actions">
              <RadzenNumeric TValue="int" Min="1" Class="input-numeric" @bind-Value="_productLineViewModel!.Quantity" />
              <RadzenButton Text="Køb nu" Class="button-buy-now" Click="@(args => OnBuyClickAsync(args, product))" />
            </div>
          </div>
        }
      }
    </div>
  </div>
</RadzenContent>




@code {
  private IEnumerable<ProductViewModel>? _products;
  private readonly ProductLineViewModel? _productLineViewModel = new();
  private CustomerViewModel? _customerViewModel = new();

  protected override async Task OnInitializedAsync()
  {
    var token = await SessionStorage.GetItemAsync<string>("ecommerce-login-token");
    if (string.IsNullOrEmpty(token)) Navigation.NavigateTo("login", true);

    var userEmail = await SessionStorage.GetItemAsync<string>("user-email");
    var customer = await UserGatewayApi.GetCustomerByEmail(userEmail);
    _customerViewModel = Mapper.Map<CustomerViewModel>(customer);

    try
    {
      var productDtos = await ProductGatewayApi.GetProductsAsync($"Bearer {token}");
      if (productDtos != null) _products = Mapper.Map<IEnumerable<ProductViewModel>>(productDtos); 
    }
    catch (ApiException)
    {
      NotificationService.Notify
      (new NotificationMessage()
        {
          Severity = NotificationSeverity.Error,
          Summary = "Autorisering fejl!",
          Detail = "Du har ikke adgang til denne side",
          Duration = 4000
        });
      await SessionStorage.RemoveItemAsync("ecommerce-login-token");
      Navigation.NavigateTo("/login");
    }
  }

  private async Task OnLogOutClickAsync(MouseEventArgs obj)
  {
    await SessionStorage.RemoveItemAsync("ecommerce-login-token");
    await SessionStorage.RemoveItemAsync("basket");
    await SessionStorage.RemoveItemAsync("user-email");
    await SessionStorage.RemoveItemAsync("assigned-order");

    NotificationService.Notify
    (new NotificationMessage()
      {
        Severity = NotificationSeverity.Info,
        Summary = "Logget ud",
        Detail =  "Du blev logget ud",
        Duration = 4000
      });
    await Task.Delay(1000);
    Navigation.NavigateTo("login", true);
  }

  private async Task OnBuyClickAsync(MouseEventArgs obj, ProductViewModel product)
  {
    var productLineViewModel = new ProductLineViewModel
      {
        Id = Guid.NewGuid(),
        Product = product,
        Quantity = _productLineViewModel?.Quantity ?? 0
      };

    var basket = await SessionStorage.GetItemAsync<List<ProductLineViewModel>>("basket") ?? new();
    basket.Add(productLineViewModel);
    await SessionStorage.SetItemAsync("basket", basket);

    NotificationService.Notify
    (new NotificationMessage()
      {
        Severity = NotificationSeverity.Info,
        Summary = "Tilføjet til Kurv",
        Detail = $"{productLineViewModel.Quantity} stk. af {product.Name} er tilføjet til kurven",
        Duration = 4000
      });
    Navigation.NavigateTo("/basket");
  }

  private void OnBasketClickAsync(MouseEventArgs obj)
  {
    Navigation.NavigateTo("/basket");
  }

  private void OnOrdreClickAsync(MouseEventArgs obj)
  {
    Navigation.NavigateTo("/orders");
  }

}

