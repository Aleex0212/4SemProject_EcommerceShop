@page "/homepage"

@inject Blazored.SessionStorage.ISessionStorageService SessionStorage
@inject IProductGatewayApi ProductGatewayApi
@inject NotificationService NotificationService
@inject NavigationManager Navigation
@inject IMapper Mapper

<RadzenContent>
  <div class="navbar-container" style="background-color: #1b242e; padding: 20px 40px; display: flex; justify-content: space-between; align-items: center; box-shadow: 0 6px 15px rgba(0, 0, 0, 0.1); border-radius: 12px; width: 100%; position: fixed; top: 0; left: 0; z-index: 10;">
    <div style="font-size: 24px; font-weight: bold; color: white; display: flex; align-items: center;">
      <RadzenIcon Icon="home" Style="width: 40px; margin-right: 10px;"/>
      <span style="color: white;">Velkommen til EcommerceShop</span>
    </div>
    <RadzenButton Icon="account_circle" Style="background-color: transparent; color: white; border: none; font-size: 28px; padding: 0;"/>
  </div>

  <div style="display: flex; padding-top: 80px; height: 100vh;">
    <div style="background-color: #1b242e; padding: 20px; width: 250px; box-shadow: 0 6px 15px rgba(0, 0, 0, 0.1); height: 100%; position: fixed; left: 0; top: 80px;">

      <RadzenButton Text="Produkter"
                    Style="background-color: #3498db; color: white; width: 100%; padding: 15px; margin-bottom: 15px; border-radius: 6px; border: none; cursor: pointer; box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2); transition: all 0.3s ease; font-size: 18px;" />

      <RadzenButton Text="Kurv" Icon="shopping_cart"
                    Style="background-color: #2c3e50; color: white; width: 100%; padding: 15px; margin-bottom: 20px;border-radius: 6px; border: none; cursor: pointer; box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2); transition: all 0.3s ease; font-size: 18px;"
                    Click="OnBasketClickAsync" />

      <RadzenButton Text="Ordre"
                    Style="background-color: #2c3e50; color: white; width: 100%; padding: 15px; margin-bottom: 15px; border-radius: 6px; border: none; cursor: pointer; box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);  transition: all 0.3s ease; font-size: 18px;"
                      Click="OnOrdreClickAsync" />
      
      <RadzenButton Text="Indstillinger"
                    Style="background-color: #2c3e50; color: white; width: 100%; padding: 15px; margin-bottom: 15px; border-radius: 6px; border: none; cursor: pointer; box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2); transition: all 0.3s ease; font-size: 18px;"
                    />

      <RadzenButton Text="Log ud" Icon="exit_to_app"
                    Style="background-color: #b30000; color: white; width: 100%; padding: 15px; margin-bottom: 15px; border-radius: 6px; border: none; cursor: pointer; box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2); transition: all 0.3s ease; font-size: 18px;"
                    Click="OnLogOutClickAsync" />
    </div>

    <div style="flex-grow: 1; margin-left: 270px; display: grid; grid-template-columns: repeat(auto-fill, minmax(300px, 1fr)); gap: 20px; padding: 20px 40px; background-color: #c0cad7; overflow-y: auto;">
      @if (_products == null)
      {
        <p style="color: #2c3e50; font-family: 'Segoe UI', sans-serif; font-size: 18px;">Indlæser produkter...</p>
      }
      else
      {
        @foreach (var product in _products)
        {
          <div style="background-color: #ffffff; border-radius: 12px; box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15); padding: 20px; text-align: center; transition: all 0.3s ease; height: 400px;">
            <img src="https://fakeimg.pl/600x400/cccccc/3b3d3d?text=Produkt" alt="@product.Name" style="width: 100%; height: 200px; border-radius: 8px; margin-bottom: 15px; object-fit: cover;" />
            <h3 style="color: #2c3e50; font-size: 22px; font-weight: bold;">@product.Name</h3>
            <p style="color: #3498db; font-size: 18px; margin: 5px 0;">Pris: @product.Price kr.</p>
            <p style="color: #95a5a6; font-size: 16px;">Antal tilgængelig: @product.Amount</p>
            <div style="display: flex; align-items: center; justify-content: center; gap: 10px; margin-top: 15px;">
              <RadzenNumeric TValue="int" Min="1" 
                             Style="width: 80px; border: 1px solid #ddd; border-radius: 6px; padding: 5px; text-align: center; font-size: 16px;"
                             @bind-Value="_productLineViewModel!.Quantity" />
              <RadzenButton Text="Køb nu" 
                            Style="background-color: #3498db; color: white; padding: 10px 20px; border-radius: 8px; border: none; cursor: pointer; box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1); transition: all 0.3s ease;" 
                            Click="@(args => OnBuyClickAsync(args, product))" />
            </div>
          </div>
        }
      }
    </div>
  </div>
</RadzenContent>

@code {
  private IEnumerable<ProductViewModel>? _products;
  private readonly ProductLineViewModel? _productLineViewModel = new();

  protected override async Task OnInitializedAsync()
  {
    var token = await SessionStorage.GetItemAsync<string>("ecommerce-login-token");
    if (string.IsNullOrEmpty(token)) Navigation.NavigateTo("login", true);

    try
    {
      var productDtos = await ProductGatewayApi.GetProductsAsync($"Bearer {token}");
      if (productDtos != null)
      { _products = Mapper.Map<IEnumerable<ProductViewModel>>(productDtos); }
    }
    catch (ApiException)
    {
      NotificationService.Notify
      (new NotificationMessage()
        {
          Severity = NotificationSeverity.Error,
          Summary = "Autorisering fejl!",
          Detail = "Du har ikke adgang til denne side",
          Duration = 4000
        });
      await SessionStorage.RemoveItemAsync("ecommerce-login-token");
      Navigation.NavigateTo("/login");
    }
  }

  private async Task OnLogOutClickAsync(MouseEventArgs obj)
  {
    await SessionStorage.RemoveItemAsync("ecommerce-login-token");
    await SessionStorage.RemoveItemAsync("basket");
    await SessionStorage.RemoveItemAsync("user-email");
    await SessionStorage.RemoveItemAsync("assigned-order");

    NotificationService.Notify
    (new NotificationMessage()
      {
        Severity = NotificationSeverity.Info,
        Summary = "Logget ud",
        Detail =  "Du blev logget ud",
        Duration = 4000
      });
    await Task.Delay(1000);
    Navigation.NavigateTo("login", true);
  }

  private async Task OnBuyClickAsync(MouseEventArgs obj, ProductViewModel product)
  {
    var productLineViewModel = new ProductLineViewModel
      {
        Id = Guid.NewGuid(),
        Product = product,
        Quantity = _productLineViewModel?.Quantity ?? 0
      };

    var basket = await SessionStorage.GetItemAsync<List<ProductLineViewModel>>("basket") ?? new();
    basket.Add(productLineViewModel);
    await SessionStorage.SetItemAsync("basket", basket);

    NotificationService.Notify
    (new NotificationMessage()
      {
        Severity = NotificationSeverity.Info,
        Summary = "Tilføjet til Kurv",
        Detail = $"{productLineViewModel.Quantity} stk. af {product.Name} er tilføjet til kurven",
        Duration = 4000
      });
    Navigation.NavigateTo("/basket");
  }

  private void OnBasketClickAsync(MouseEventArgs obj)
  {
    Navigation.NavigateTo("/basket");
  }

  private void OnOrdreClickAsync(MouseEventArgs obj)
  {
    Navigation.NavigateTo("/orders");
  }

}

