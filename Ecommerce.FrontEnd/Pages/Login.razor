@page "/login"

@inject IMapper Mapper
@inject ILogger<Login> Logger
@inject NavigationManager Navigation
@inject NotificationService NotificationService
@inject ISessionStorageService SessionStorage
@inject IAuthGatewayApi AuthGatewayApi
@inject IUserGatewayApi UserGatewayApi

<RadzenContent>
  <div class="login-container">
    <RadzenPanel class="login-panel">
      <h1 class="login-header main-header">Ecommerce-Shop</h1>
      <h2 class="login-header welcome-header">Velkommen</h2>
      <h3 class="login-header instruction-header">Log ind for at fortsætte</h3>

      <EditForm Model="_loginViewModel" OnValidSubmit="HandleLogin">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <RadzenTextBox @bind-Value="_loginViewModel.Email"
                       Placeholder="Brugernavn"
                       Type="email"
                       class="login-input" />

        <RadzenTextBox @bind-Value="_loginViewModel.Password"
                       Placeholder="Adgangskode"
                       Type="password"
                       class="login-input" />

        <RadzenButton ButtonType="ButtonType.Submit"
                      Icon="lock"
                      Text="Log ind"
                      class="login-button" />
      </EditForm>

      <RadzenLink class="forgot-password-link"
                  Text="Glemt adgangskode?"
                  Url="/forgot-password" />
    </RadzenPanel>
  </div>
</RadzenContent>

@code {
  private readonly LoginViewModel _loginViewModel = new();

  private async Task HandleLogin()
  {
    if (!ValidateForm())
    {
      NotificationService.Notify(new NotificationMessage
        {
          Severity = NotificationSeverity.Error,
          Summary = "Input Valideringsfejl",
          Detail = "Venligst udfyld alle felter korrekt.",
          Duration = 2000
        });
      return;
    }

    try
    {
      var hashedPasswordSalt = HashPassword(_loginViewModel);

      var loginDto = Mapper.Map<LoginDto>(_loginViewModel);
      loginDto.HashedPassword = hashedPasswordSalt;

      var token = await AuthGatewayApi.Login(loginDto);

      if (string.IsNullOrEmpty(token))
      {
        NotificationService.Notify(new NotificationMessage
          {
            Severity = NotificationSeverity.Error,
            Summary = "Login Fejlede",
            Detail = "Forkert Email eller Adgangskode",
            Duration = 2000
          });
        return;
      }

      await SessionStorage.SetItemAsStringAsync("ecommerce-login-token", token);
      await SessionStorage.SetItemAsStringAsync("user-email", _loginViewModel.Email);

      var user = await UserGatewayApi.GetCustomerByEmail(loginDto.Email);
      var customer = Mapper.Map<CustomerViewModel>(user);

      NotificationService.Notify(new NotificationMessage
        {
          Severity = NotificationSeverity.Success,
          Summary = "Login gennemført",
          Detail = "Du er logget ind",
          Duration = 4000
        });

      Navigation.NavigateTo(customer.UserType == UserTypes.Admin ? "/admin/settings" : "/products");
    }
    catch (ApiException ex)
    {
      Logger.LogError($"Login failed: {ex.Message}");
      NotificationService.Notify(new NotificationMessage
        {
          Severity = NotificationSeverity.Error,
          Summary = "Login Fejlede",
          Detail = "Noget gik galt. Prøv igen.",
          Duration = 2000
        });
    }
    catch (Exception ex)
    {
      Logger.LogError($"Der opstod en uventet: {ex.Message}");
      NotificationService.Notify(new NotificationMessage
        {
          Severity = NotificationSeverity.Error,
          Summary = "Login Fejlede",
          Detail = "En uventet fejl opstod.",
          Duration = 2000
        });
    }
  }

  private string HashPassword(LoginViewModel loginViewModel)
  {
    string passwordToHash = loginViewModel.Password;
    string saltValue = "super-secret-salt-value_xd";
    byte[] salt = Encoding.UTF8.GetBytes(saltValue!);

    return Convert.ToBase64String(
      KeyDerivation.Pbkdf2(
        password: passwordToHash,
        salt: salt,
        prf: KeyDerivationPrf.HMACSHA256,
        iterationCount: 10,
        numBytesRequested: 256 / 8
      )
    );
  }

  private bool ValidateForm()
  {
    return !string.IsNullOrWhiteSpace(_loginViewModel.Email) &&
           !string.IsNullOrWhiteSpace(_loginViewModel.Password);
  }
}
