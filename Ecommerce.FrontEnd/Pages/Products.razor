@page "/products"
@using Ecommerce.FrontEnd.Components

@inject IMapper Mapper
@inject NotificationService NotificationService
@inject NavigationManager Navigation
@inject Blazored.SessionStorage.ISessionStorageService SessionStorage
@inject IProductGatewayApi ProductGatewayApi
@inject IUserGatewayApi UserGatewayApi

<RadzenContent>
  <TopNavbar CustomerName="@_customerViewModel?.Name" />

  <div class="content-wrapper">
    <Sidebar
      OnProductsClick="OnProductsClickAsync"
      OnBasketClick="OnBasketClickAsync"
      OnOrdreClick="OnOrdreClickAsync"
      OnSettingsClick="OnSettingsClickAsync"
      OnLogOutClick="OnLogOutClickAsync" />
  </div>

  <div class="product-content">
    @if (_products == null)
    {
      <p class="product-name">Indlæser produkter...</p>
    }
    else
    {
      @foreach (var product in _products)
      {
        <div class="product-card">
          <img src="https://fakeimg.pl/600x400/cccccc/3b3d3d?text=Produkt" alt="@product.Name" class="product-image" />
          <h3 class="product-name">@product.Name</h3>
          <p class="product-price">Pris: @product.Price kr.</p>
          <p class="product-quantity">Antal tilgængelig: @product.Amount</p>
          <div class="product-actions">
            <RadzenButton Text="Tilføj til kurv" Class="button-buy-now" Click="@(args => OnBuyClickAsync(product))" />
          </div>
        </div>
      }
    }
  </div>
</RadzenContent>

@code {
  private IEnumerable<ProductViewModel>? _products;
  private readonly ProductLineViewModel? _productLineViewModel = new();
  private CustomerViewModel? _customerViewModel = new();

  protected override async Task OnInitializedAsync()
  {
    var token = await SessionStorage.GetItemAsync<string>("ecommerce-login-token");
    if (string.IsNullOrEmpty(token))
    {
      RemoveCachedSession();
      Navigation.NavigateTo("login", true);
    }

    var userEmail = await SessionStorage.GetItemAsync<string>("user-email");
    var customer = await UserGatewayApi.GetCustomerByEmail(userEmail);
    _customerViewModel = Mapper.Map<CustomerViewModel>(customer);

    try
    {
      var productDtos = await ProductGatewayApi.GetProductsAsync($"Bearer {token}");
      if (productDtos != null) _products = Mapper.Map<IEnumerable<ProductViewModel>>(productDtos); 
    }
    catch (ApiException)
    {
      NotificationService.Notify
      (new NotificationMessage()
      {
        Severity = NotificationSeverity.Error,
        Summary = "Autorisering fejl!",
        Detail = "Du har ikke adgang til denne side",
        Duration = 4000
      });
      await SessionStorage.RemoveItemAsync("ecommerce-login-token");
      Navigation.NavigateTo("/login");
    }
  }

  private async Task OnBuyClickAsync(ProductViewModel product)
  {
    var productLineViewModel = new ProductLineViewModel
    {
      Id = Guid.NewGuid(),
      Product = product,
      Quantity = _productLineViewModel?.Quantity ?? 0
    };

    var basket = await SessionStorage.GetItemAsync<List<ProductLineViewModel>>("basket") ?? new();
    basket.Add(productLineViewModel);
    await SessionStorage.SetItemAsync("basket", basket);

    NotificationService.Notify
    (new NotificationMessage()
    {
      Severity = NotificationSeverity.Info,
      Summary = "Tilføjet til Kurv",
      Detail = $"{product.Name} er tilføjet til kurven",
      Duration = 4000
    });
  }
  
  private async Task OnLogOutClickAsync()
  {
    RemoveCachedSession();

    NotificationService.Notify
    (new NotificationMessage()
    {
      Severity = NotificationSeverity.Info,
      Summary = "Logget ud",
      Detail =  "Du blev logget ud",
      Duration = 4000
    });
    await Task.Delay(1000);
    Navigation.NavigateTo("login", true);
  }

  private void RemoveCachedSession()
  {
    SessionStorage.RemoveItemAsync("ecommerce-login-token");
    SessionStorage.RemoveItemAsync("basket");
    SessionStorage.RemoveItemAsync("user-email");
    SessionStorage.RemoveItemAsync("assigned-order");
  }


  private void OnProductsClickAsync()
  {
    Navigation.NavigateTo("/products");
  }

  private void OnBasketClickAsync()
  {
    Navigation.NavigateTo("/basket");
  }

  private void OnOrdreClickAsync()
  {
    Navigation.NavigateTo("/orders");
  }

  private void OnSettingsClickAsync()
  {
    Navigation.NavigateTo("/settings");
  }
}
