@page "/login"

@using System.Text
@using Ecommerce.FrontEnd.Interfaces.Refit
@using Ecommerce.FrontEnd.ViewModels
@using EcommerceShop.Common.Dto
@using Microsoft.AspNetCore.Cryptography.KeyDerivation
@using Microsoft.IdentityModel.Tokens
@using Refit
@using Radzen
@using Radzen.Blazor

@inject IAuthApi AuthApi
@inject NavigationManager Navigation
@inject NotificationService NotificationService
@inject ILogger<LoginComponent> Logger
@inject Blazored.SessionStorage.ISessionStorageService SessionStorage

<RadzenContent>
  <div class="login-container" style="display: flex; justify-content: center; align-items: center; min-height: 100vh; background-color: #c0cad7; padding: 20px;">
    <RadzenPanel Style="max-width: 450px; margin: 0 auto; padding: 30px; background-color: #ffffff; border-radius: 12px; box-shadow: 0 6px 20px rgba(0, 0, 0, 0.1);">
      <h1 class="login-header" style="text-align: center; color: #2c3e50; font-size: 36px; margin-bottom: 5px; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; font-weight: bold;">Ecommerce-Shop</h1>
      <h2 class="login-header" style="text-align: center; color: #3498db; font-size: 34px; margin-bottom: 15px; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; font-weight: 600;">Velkommen</h2>
      <h3 class="login-header" style="text-align: center; color: #95a5a6; font-size: 20px; margin-bottom: 40px; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; font-style: italic;">Log ind for at fortsætte</h3>

      <RadzenTextBox @bind-Value="_loginViewModel.Email"
                     Placeholder="Brugernavn"
                     Type ="email"
                     Style="margin-bottom: 20px; width: 100%; padding: 14px 18px; border-radius: 8px; border: 1px solid #ddd; font-size: 16px; box-sizing: border-box; transition: all 0.3s ease;"
                     onfocus="this.style.borderColor='#4CAF50'; this.style.boxShadow='0 0 5px rgba(76, 175, 80, 0.4)';"
                     onblur="this.style.borderColor='#ddd'; this.style.boxShadow='none';" />

      <RadzenTextBox @bind-Value="_loginViewModel.Password"
                     Placeholder="Adgangskode"
                     Type="password"
                     Style="margin-bottom: 30px; width: 100%; padding: 14px 18px; border-radius: 8px; border: 1px solid #ddd; font-size: 16px; box-sizing: border-box; transition: all 0.3s ease;"
                     onfocus="this.style.borderColor='#4CAF50'; this.style.boxShadow='0 0 5px rgba(76, 175, 80, 0.4)';"
                     onblur="this.style.borderColor='#ddd'; this.style.boxShadow='none';" />

      <RadzenButton ButtonType="ButtonType.Button"
                    Icon="lock"
                    Text="Log ind"
                    Click="@(async args => await HandleLogin())"
                    Style="width: 100%; background-color: #4CAF50; color: white; padding: 16px; font-size: 16px; border-radius: 8px; border: none; cursor: pointer; box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1); transition: all 0.3s ease;"
                    onmouseover="this.style.backgroundColor='#2f6a2f';"
                    onmouseout="this.style.backgroundColor='#4CAF50';" />

      <RadzenLink class="forgot-password-link"
                  Text="Glemt adgangskode?"
                  Url="/forgot-password"
                  Style="display: block; text-align: center; margin-top: 20px; color: #007BFF; font-size: 14px; text-decoration: none; transition: color 0.3s ease;"
                  onmouseover="this.style.color='#0056b3';"
                  onmouseout="this.style.color='#007BFF';" />
    </RadzenPanel>
  </div>
</RadzenContent>

@code {
  private readonly LoginViewModel _loginViewModel = new();

  private async Task HandleLogin()
  {
    try
    {
      var hashedPasswordSalt = HashPassword(_loginViewModel);

      var loginDto = MapToDtoModel(_loginViewModel);
      
      loginDto.HashedPassword = hashedPasswordSalt;

      var token = await AuthApi.Login(loginDto);

      if(!token.IsNullOrEmpty()) await SessionStorage.SetItemAsStringAsync("ecommerce-login-token", token);
      LoginNotification(token);
    }
    catch (ApiException ex)
    {
      Logger.LogError($"Login failed: {ex.Message}");
    }
  }

  private void LoginNotification(string token)
  {
    if (string.IsNullOrEmpty(token)) 
    { 
      NotificationService.Notify
      (new NotificationMessage() { 
        Severity = NotificationSeverity.Error, 
        Summary = "Login Fejlede", 
        Detail =  "Forkert Email eller Adgangskode", 
        Duration = 4000 });}

    else { NotificationService.Notify
      (new NotificationMessage() { 
        Severity = NotificationSeverity.Success, 
        Summary = "Login gennemført", 
        Detail =  "Du er logget ind", 
        Duration = 4000 });
        
      Navigation.NavigateTo("/homepage");
    }
  }

  private string HashPassword(LoginViewModel loginViewModel)
  {
    string passwordToHash = loginViewModel.Password; //UserPassword1!
    string saltValue = "super-secret-salt-value_xd";
    byte[] salt = Encoding.UTF8.GetBytes(saltValue!);

    string hashedPasswordSalt = Convert.ToBase64String
    (KeyDerivation.Pbkdf2
      (
        password: passwordToHash,
        salt: salt,
        prf: KeyDerivationPrf.HMACSHA256,
        iterationCount: 10,
        numBytesRequested: 256 / 8)
    );
    return hashedPasswordSalt;
  }

  private LoginDto MapToDtoModel(LoginViewModel loginViewModel)
  {
    return new LoginDto
    {
      Email = loginViewModel.Email,
      HashedPassword = loginViewModel.Password
    };
  }
}
